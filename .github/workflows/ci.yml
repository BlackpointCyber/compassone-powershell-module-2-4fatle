name: PSCompassOne CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup PowerShell environment
        uses: PowerShell/PowerShell@v1
        with:
          pwsh-version: '7.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v3
        with:
          path: ~/.local/share/powershell/Modules
          key: powershell-modules-${{ hashFiles('**/requirements.psd1') }}

      - name: Install test dependencies
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force
          Install-Module -Name PSScriptAnalyzer -MinimumVersion 1.20.0 -Force
          Install-Module -Name platyPS -MinimumVersion 2.0.0 -Force

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          $results | Format-Table -AutoSize
          if ($results.Severity -contains 'Error') {
            throw "PSScriptAnalyzer found errors"
          }

      - name: Execute Pester tests
        shell: pwsh
        run: |
          ./src/test/test.ps1 -CI

      - name: Generate code coverage report
        shell: pwsh
        run: |
          $coverage = Get-TestCoverage
          $coverage | ConvertTo-Json | Out-File -Path ./src/test/coverage/coverage.json

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: src/test/results
          retention-days: 7

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-${{ matrix.os }}
          path: src/test/coverage
          retention-days: 7

  security_scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'powershell'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run dependency scanning
        shell: pwsh
        run: |
          $modules = Get-Content requirements.psd1 | ConvertFrom-Json
          foreach ($module in $modules) {
            $info = Find-Module -Name $module.Name -RequiredVersion $module.Version
            if ($info.AdditionalMetadata.IsPrerelease) {
              Write-Warning "Module $($module.Name) is using prerelease version"
            }
          }

      - name: Execute secret scanning
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:powershell/secret-scanning"

      - name: Upload security findings
        uses: actions/upload-artifact@v2
        with:
          name: security-report
          path: security/report
          retention-days: 30

  build:
    name: Build Module
    needs: [test, security_scan]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup PowerShell environment
        uses: PowerShell/PowerShell@v1
        with:
          pwsh-version: '7.x'

      - name: Build PowerShell module
        shell: pwsh
        run: |
          ./src/build/build.ps1 -Configuration Release

      - name: Run package validation
        shell: pwsh
        run: |
          $manifest = Test-ModuleManifest -Path ./output/PSCompassOne/PSCompassOne.psd1
          if (-not $manifest) {
            throw "Module manifest validation failed"
          }

      - name: Generate documentation
        shell: pwsh
        run: |
          Import-Module platyPS
          New-MarkdownHelp -Module PSCompassOne -OutputFolder ./docs/cmdlets -Force

      - name: Create module package
        shell: pwsh
        run: |
          Compress-Archive -Path ./output/PSCompassOne -DestinationPath ./output/PSCompassOne.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: PSCompassOne-module
          path: ./output/PSCompassOne.zip
          retention-days: 30

      - name: Publish to PowerShell Gallery
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: pwsh
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          Publish-Module -Path ./output/PSCompassOne -NuGetApiKey $env:PSGALLERY_API_KEY -Verbose